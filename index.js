const Telegraf = require("telegraf")
const Extra = require("telegraf/extra")
const Markup = require("telegraf/markup")
const { Stage, session } = Telegraf
const SceneGen = require("./SceneGen")

const TOKEN = process.env.TOKEN
const bot = new Telegraf(TOKEN)

const KEY = process.env.KEY
const { MongoClient, ObjectId } = require("mongodb")
const uri = `mongodb+srv://Node:${KEY}@cluster0-ttfss.mongodb.net/contesterbot?retryWrites=true&w=majority`
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true })

const admins = [582824629]
const curScenes = new SceneGen()
const stage = new Stage([curScenes.registration()])
bot.use(session())
bot.use(stage.middleware())

bot.command("start", showContest)
async function showContest(ctx) {
  const contest = await contests.findOne({})
  const userId = ctx.from.id

  if (contest.winnerId) {
    sendMsg(ctx, `
–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω.
ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: <b>${contest.winnerId}</b>
    `)
  } else {
    if (contest.stop) {
      sendMsg(ctx, `
<b>–ö–æ–Ω–∫—É—Ä—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>
–ö–æ–Ω–∫—É—Ä—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${contest.members.length}
      `)
    } else {
      sendMsg(ctx, `
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.first_name}!</b>
–°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–æ–Ω–∫—É—Ä—Å –Ω–∞ 1000$!

–£—Å–ª–æ–≤–∏—è:
- –ü—Ä–∏–¥—É–º–∞—Ç—å —Å—Ç–∏—à–æ–∫ –æ –Ω–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ "–†–µ—Å—Ç–æ—Ä–∞–Ω"
- –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
        `, buildInlineMarkup([cbb(`${contest.members.find(u => u == userId)
        ? "‚úÖ " : ""}(${contest.members.length}) –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å üéâ`, "participate")]))
    }
  }
}

bot.command("end", async ctx => {
  const userId = ctx.from.id

  if (admins.find(u => u == userId)) {
    const contest = await contests.findOne({})

    await contests.updateOne({ _id: contest._id }, {
      $set: {
        stop: true
      }
    })

    sendMsg(ctx, `–ö–æ–Ω–∫—É—Ä—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`)

    contest.members.forEach(userId => {
      bot.telegram.sendMessage(userId, "–ö–æ–Ω–∫—É—Ä—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!")
    })
  } else {
    sendMsg(ctx, `–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–Ω–∫—É—Ä—Å—É, –≤–≤–µ–¥–∏—Ç–µ /start.`)
  }
})

bot.hears(/\/set_winner (.*)/, async ctx => {
  const userId = ctx.from.id

  if (admins.find(u => u == userId)) {
    const winnerId = +ctx.match[1]
    const contest = await contests.findOne({})

    await contests.updateOne({ _id: contest._id }, {
      $set: {
        winnerId
      }
    })

    bot.telegram.sendMessage(winnerId, "–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ! –û–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ –∞–¥–º–∏–Ω–∞ —Å –í–∞–º–∏.")
    bot.telegram.sendMessage(admins[0], `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>${winnerId}</b>
<a href="tg://user?id=${winnerId}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è</a>`, { parse_mode: "html" })

    contest.members.filter(u => u != winnerId).forEach(userId => {
      bot.telegram.sendMessage(userId, `–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ...`)
    })
  } else {
    sendMsg(ctx, `–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–Ω–∫—É—Ä—Å—É, –≤–≤–µ–¥–∏—Ç–µ /start.`)
  }
})

bot.action("participate", async ctx => {
  const contest = await contests.findOne({})
  const userId = ctx.from.id

  if (contest.stop) {
    ctx.answerCbQuery("–ö–æ–Ω–∫—É—Ä—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏ —É–∂–µ –ø–æ–¥–≤–æ–¥—è—Ç—Å—è –∏—Ç–æ–≥–∏")
  } else {
    let { members } = contest

    if (members.find(u => u == userId)) {
      members = members.filter(u => u != userId)

      await users.deleteOne({ userId })
      await contests.updateOne({ _id: contest._id }, { $set: { members } })

      ctx.answerCbQuery("–í—ã –ø–µ—Ä–µ—Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
      ctx.deleteMessage()
      showContest(ctx)
    } else {
      ctx.scene.enter("reg")
    }
  }
})

function cbb(text, action) {
  return Markup.callbackButton(text, action)
}

function buildInlineMarkup(markup = []) {
  return Extra.markup(Markup.inlineKeyboard(markup))
}

function sendMsg(ctx, msg, markup = []) {
  ctx.replyWithHTML(msg, markup)
}

client.connect(err => {
  if (err) console.log(err)

  global.users = client.db("contesterbot").collection("users")
  global.contests = client.db("contesterbot").collection("contests")

  bot.launch()
})